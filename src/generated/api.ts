/* tslint:disable */
/* eslint-disable */
/**
 * Voter API Docs
 * This is REST API Application from Voter module, Software Process and Project Management 2022.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base'

/**
 *
 * @export
 * @interface CandidateResponse
 */
export interface CandidateResponse {
  /**
   *
   * @type {number}
   * @memberof CandidateResponse
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof CandidateResponse
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof CandidateResponse
   */
  pictureUrl?: string
  /**
   *
   * @type {number}
   * @memberof CandidateResponse
   */
  area_id?: number
  /**
   *
   * @type {number}
   * @memberof CandidateResponse
   */
  party_id?: number
}
/**
 *
 * @export
 * @interface CreateUserInput
 */
export interface CreateUserInput {
  /**
   *
   * @type {string}
   * @memberof CreateUserInput
   */
  citizenID: string
  /**
   *
   * @type {string}
   * @memberof CreateUserInput
   */
  laserCode: string
  /**
   *
   * @type {string}
   * @memberof CreateUserInput
   */
  email: string
  /**
   *
   * @type {string}
   * @memberof CreateUserInput
   */
  password: string
  /**
   *
   * @type {string}
   * @memberof CreateUserInput
   */
  passwordConfirmation: string
}
/**
 *
 * @export
 * @interface CreateUserResponse
 */
export interface CreateUserResponse {
  /**
   *
   * @type {string}
   * @memberof CreateUserResponse
   */
  status?: string
  /**
   *
   * @type {UserInformation}
   * @memberof CreateUserResponse
   */
  user?: UserInformation
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
  /**
   *
   * @type {string}
   * @memberof ErrorResponse
   */
  status?: string
  /**
   *
   * @type {string}
   * @memberof ErrorResponse
   */
  error?: string
}
/**
 *
 * @export
 * @interface GetAllBallotRequest
 */
export interface GetAllBallotRequest {
  /**
   *
   * @type {number}
   * @memberof GetAllBallotRequest
   */
  voteTopicId: number
  /**
   *
   * @type {number}
   * @memberof GetAllBallotRequest
   */
  areaId: number
}
/**
 *
 * @export
 * @interface GetAllBallotResponse
 */
export interface GetAllBallotResponse {
  /**
   *
   * @type {string}
   * @memberof GetAllBallotResponse
   */
  _id?: string
  /**
   *
   * @type {string}
   * @memberof GetAllBallotResponse
   */
  timestamp?: string
  /**
   *
   * @type {string}
   * @memberof GetAllBallotResponse
   */
  userReference?: string
  /**
   *
   * @type {string}
   * @memberof GetAllBallotResponse
   */
  ballotId?: string
  /**
   *
   * @type {number}
   * @memberof GetAllBallotResponse
   */
  voteTopicId?: number
  /**
   *
   * @type {number}
   * @memberof GetAllBallotResponse
   */
  candidateId?: number
  /**
   *
   * @type {number}
   * @memberof GetAllBallotResponse
   */
  areaIdd?: number
}
/**
 *
 * @export
 * @interface LoginUserInput
 */
export interface LoginUserInput {
  /**
   *
   * @type {string}
   * @memberof LoginUserInput
   */
  email: string
  /**
   *
   * @type {string}
   * @memberof LoginUserInput
   */
  password: string
}
/**
 *
 * @export
 * @interface LoginUserInputV2
 */
export interface LoginUserInputV2 {
  /**
   *
   * @type {string}
   * @memberof LoginUserInputV2
   */
  citizenId: string
  /**
   *
   * @type {string}
   * @memberof LoginUserInputV2
   */
  laserId: string
}
/**
 *
 * @export
 * @interface LoginUserResponse
 */
export interface LoginUserResponse {
  /**
   *
   * @type {string}
   * @memberof LoginUserResponse
   */
  status?: string
  /**
   *
   * @type {string}
   * @memberof LoginUserResponse
   */
  accessToken?: string
}
/**
 *
 * @export
 * @interface LoginUserResponseV2
 */
export interface LoginUserResponseV2 {
  /**
   *
   * @type {string}
   * @memberof LoginUserResponseV2
   */
  token?: string
}
/**
 *
 * @export
 * @interface MessageResponse
 */
export interface MessageResponse {
  /**
   *
   * @type {string}
   * @memberof MessageResponse
   */
  status?: string
  /**
   *
   * @type {string}
   * @memberof MessageResponse
   */
  message?: string
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {string}
   * @memberof User
   */
  citizenID?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  laserCode?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  email?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  _id?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  updatedAt?: string
}
/**
 *
 * @export
 * @interface UserInformation
 */
export interface UserInformation {
  /**
   *
   * @type {number}
   * @memberof UserInformation
   */
  CitizenID?: number
  /**
   *
   * @type {string}
   * @memberof UserInformation
   */
  LazerID?: string
  /**
   *
   * @type {string}
   * @memberof UserInformation
   */
  Name?: string
  /**
   *
   * @type {string}
   * @memberof UserInformation
   */
  Lastname?: string
  /**
   *
   * @type {string}
   * @memberof UserInformation
   */
  Birthday?: string
  /**
   *
   * @type {string}
   * @memberof UserInformation
   */
  Nationality?: string
  /**
   *
   * @type {number}
   * @memberof UserInformation
   */
  DistricID?: number
}
/**
 *
 * @export
 * @interface VoteAvailableResponse
 */
export interface VoteAvailableResponse {
  /**
   *
   * @type {number}
   * @memberof VoteAvailableResponse
   */
  voteTopicId?: number
  /**
   *
   * @type {string}
   * @memberof VoteAvailableResponse
   */
  voteTopicName?: string
}
/**
 *
 * @export
 * @interface VoteNoRequest
 */
export interface VoteNoRequest {
  /**
   *
   * @type {string}
   * @memberof VoteNoRequest
   */
  ballotId: string
  /**
   *
   * @type {number}
   * @memberof VoteNoRequest
   */
  voteTopicId: number
  /**
   *
   * @type {number}
   * @memberof VoteNoRequest
   */
  areaId?: number
}
/**
 *
 * @export
 * @interface VoteRequest
 */
export interface VoteRequest {
  /**
   *
   * @type {string}
   * @memberof VoteRequest
   */
  ballotId: string
  /**
   *
   * @type {number}
   * @memberof VoteRequest
   */
  voteTopicId: number
  /**
   *
   * @type {number}
   * @memberof VoteRequest
   */
  candidateId: number
  /**
   *
   * @type {number}
   * @memberof VoteRequest
   */
  areaId?: number
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Login a user
     * @summary Login
     * @param {LoginUserInput} loginUserInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLoginPost: async (
      loginUserInput: LoginUserInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'loginUserInput' is not null or undefined
      assertParamExists('authLoginPost', 'loginUserInput', loginUserInput)
      const localVarPath = `/auth/login`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginUserInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Login with Government API
     * @summary Login with Gov
     * @param {LoginUserInputV2} loginUserInputV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLoginV2Post: async (
      loginUserInputV2: LoginUserInputV2,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'loginUserInputV2' is not null or undefined
      assertParamExists('authLoginV2Post', 'loginUserInputV2', loginUserInputV2)
      const localVarPath = `/auth/login/v2`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginUserInputV2,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Register a user
     * @summary Register
     * @param {CreateUserInput} createUserInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRegisterPost: async (
      createUserInput: CreateUserInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createUserInput' is not null or undefined
      assertParamExists('authRegisterPost', 'createUserInput', createUserInput)
      const localVarPath = `/auth/register`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createUserInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
  return {
    /**
     * Login a user
     * @summary Login
     * @param {LoginUserInput} loginUserInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authLoginPost(
      loginUserInput: LoginUserInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<LoginUserResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(
        loginUserInput,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Login with Government API
     * @summary Login with Gov
     * @param {LoginUserInputV2} loginUserInputV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authLoginV2Post(
      loginUserInputV2: LoginUserInputV2,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<LoginUserResponseV2>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginV2Post(
        loginUserInputV2,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Register a user
     * @summary Register
     * @param {CreateUserInput} createUserInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authRegisterPost(
      createUserInput: CreateUserInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateUserResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authRegisterPost(
          createUserInput,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuthApiFp(configuration)
  return {
    /**
     * Login a user
     * @summary Login
     * @param {LoginUserInput} loginUserInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLoginPost(
      loginUserInput: LoginUserInput,
      options?: any,
    ): AxiosPromise<LoginUserResponse> {
      return localVarFp
        .authLoginPost(loginUserInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Login with Government API
     * @summary Login with Gov
     * @param {LoginUserInputV2} loginUserInputV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLoginV2Post(
      loginUserInputV2: LoginUserInputV2,
      options?: any,
    ): AxiosPromise<LoginUserResponseV2> {
      return localVarFp
        .authLoginV2Post(loginUserInputV2, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Register a user
     * @summary Register
     * @param {CreateUserInput} createUserInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRegisterPost(
      createUserInput: CreateUserInput,
      options?: any,
    ): AxiosPromise<CreateUserResponse> {
      return localVarFp
        .authRegisterPost(createUserInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   * Login a user
   * @summary Login
   * @param {LoginUserInput} loginUserInput
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authLoginPost(
    loginUserInput: LoginUserInput,
    options?: AxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .authLoginPost(loginUserInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Login with Government API
   * @summary Login with Gov
   * @param {LoginUserInputV2} loginUserInputV2
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authLoginV2Post(
    loginUserInputV2: LoginUserInputV2,
    options?: AxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .authLoginV2Post(loginUserInputV2, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Register a user
   * @summary Register
   * @param {CreateUserInput} createUserInput
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authRegisterPost(
    createUserInput: CreateUserInput,
    options?: AxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .authRegisterPost(createUserInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * CandidateApi - axios parameter creator
 * @export
 */
export const CandidateApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Get all party members
     * @param {number} partyId Party ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    candidatePartymemberPartyIdGet: async (
      partyId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'partyId' is not null or undefined
      assertParamExists('candidatePartymemberPartyIdGet', 'partyId', partyId)
      const localVarPath = `/candidate/partymember/{partyId}`.replace(
        `{${'partyId'}}`,
        encodeURIComponent(String(partyId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get selected candidate of selected topic.
     * @summary Get selected candidate
     * @param {number} voteTopicId Vote topic id (1&#x3D;MP, 2&#x3D;Party)
     * @param {number} candidateId Candidate id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    candidateVoteTopicIdCandidateIdGet: async (
      voteTopicId: number,
      candidateId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'voteTopicId' is not null or undefined
      assertParamExists(
        'candidateVoteTopicIdCandidateIdGet',
        'voteTopicId',
        voteTopicId,
      )
      // verify required parameter 'candidateId' is not null or undefined
      assertParamExists(
        'candidateVoteTopicIdCandidateIdGet',
        'candidateId',
        candidateId,
      )
      const localVarPath = `/candidate/{voteTopicId}/{candidateId}`
        .replace(`{${'voteTopicId'}}`, encodeURIComponent(String(voteTopicId)))
        .replace(`{${'candidateId'}}`, encodeURIComponent(String(candidateId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get all candidates separated by vote topic.
     * @summary Get All Candidates
     * @param {number} voteTopicId Vote topic id (1&#x3D;MP, 2&#x3D;Party)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    candidateVoteTopicIdGet: async (
      voteTopicId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'voteTopicId' is not null or undefined
      assertParamExists('candidateVoteTopicIdGet', 'voteTopicId', voteTopicId)
      const localVarPath = `/candidate/{voteTopicId}`.replace(
        `{${'voteTopicId'}}`,
        encodeURIComponent(String(voteTopicId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CandidateApi - functional programming interface
 * @export
 */
export const CandidateApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CandidateApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Get all party members
     * @param {number} partyId Party ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async candidatePartymemberPartyIdGet(
      partyId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<CandidateResponse>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.candidatePartymemberPartyIdGet(
          partyId,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Get selected candidate of selected topic.
     * @summary Get selected candidate
     * @param {number} voteTopicId Vote topic id (1&#x3D;MP, 2&#x3D;Party)
     * @param {number} candidateId Candidate id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async candidateVoteTopicIdCandidateIdGet(
      voteTopicId: number,
      candidateId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.candidateVoteTopicIdCandidateIdGet(
          voteTopicId,
          candidateId,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Get all candidates separated by vote topic.
     * @summary Get All Candidates
     * @param {number} voteTopicId Vote topic id (1&#x3D;MP, 2&#x3D;Party)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async candidateVoteTopicIdGet(
      voteTopicId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<CandidateResponse>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.candidateVoteTopicIdGet(
          voteTopicId,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * CandidateApi - factory interface
 * @export
 */
export const CandidateApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = CandidateApiFp(configuration)
  return {
    /**
     *
     * @summary Get all party members
     * @param {number} partyId Party ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    candidatePartymemberPartyIdGet(
      partyId: number,
      options?: any,
    ): AxiosPromise<Array<CandidateResponse>> {
      return localVarFp
        .candidatePartymemberPartyIdGet(partyId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get selected candidate of selected topic.
     * @summary Get selected candidate
     * @param {number} voteTopicId Vote topic id (1&#x3D;MP, 2&#x3D;Party)
     * @param {number} candidateId Candidate id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    candidateVoteTopicIdCandidateIdGet(
      voteTopicId: number,
      candidateId: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .candidateVoteTopicIdCandidateIdGet(voteTopicId, candidateId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get all candidates separated by vote topic.
     * @summary Get All Candidates
     * @param {number} voteTopicId Vote topic id (1&#x3D;MP, 2&#x3D;Party)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    candidateVoteTopicIdGet(
      voteTopicId: number,
      options?: any,
    ): AxiosPromise<Array<CandidateResponse>> {
      return localVarFp
        .candidateVoteTopicIdGet(voteTopicId, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * CandidateApi - object-oriented interface
 * @export
 * @class CandidateApi
 * @extends {BaseAPI}
 */
export class CandidateApi extends BaseAPI {
  /**
   *
   * @summary Get all party members
   * @param {number} partyId Party ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CandidateApi
   */
  public candidatePartymemberPartyIdGet(
    partyId: number,
    options?: AxiosRequestConfig,
  ) {
    return CandidateApiFp(this.configuration)
      .candidatePartymemberPartyIdGet(partyId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get selected candidate of selected topic.
   * @summary Get selected candidate
   * @param {number} voteTopicId Vote topic id (1&#x3D;MP, 2&#x3D;Party)
   * @param {number} candidateId Candidate id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CandidateApi
   */
  public candidateVoteTopicIdCandidateIdGet(
    voteTopicId: number,
    candidateId: number,
    options?: AxiosRequestConfig,
  ) {
    return CandidateApiFp(this.configuration)
      .candidateVoteTopicIdCandidateIdGet(voteTopicId, candidateId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get all candidates separated by vote topic.
   * @summary Get All Candidates
   * @param {number} voteTopicId Vote topic id (1&#x3D;MP, 2&#x3D;Party)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CandidateApi
   */
  public candidateVoteTopicIdGet(
    voteTopicId: number,
    options?: AxiosRequestConfig,
  ) {
    return CandidateApiFp(this.configuration)
      .candidateVoteTopicIdGet(voteTopicId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * HealthcheckApi - axios parameter creator
 * @export
 */
export const HealthcheckApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Responds if the app is up and running
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/health`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * HealthcheckApi - functional programming interface
 * @export
 */
export const HealthcheckApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    HealthcheckApiAxiosParamCreator(configuration)
  return {
    /**
     * Responds if the app is up and running
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async healthGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<MessageResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.healthGet(
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * HealthcheckApi - factory interface
 * @export
 */
export const HealthcheckApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = HealthcheckApiFp(configuration)
  return {
    /**
     * Responds if the app is up and running
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthGet(options?: any): AxiosPromise<MessageResponse> {
      return localVarFp
        .healthGet(options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * HealthcheckApi - object-oriented interface
 * @export
 * @class HealthcheckApi
 * @extends {BaseAPI}
 */
export class HealthcheckApi extends BaseAPI {
  /**
   * Responds if the app is up and running
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HealthcheckApi
   */
  public healthGet(options?: AxiosRequestConfig) {
    return HealthcheckApiFp(this.configuration)
      .healthGet(options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Get user information
     * @summary Get user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearerAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
  return {
    /**
     * Get user information
     * @summary Get user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersMeGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateUserResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersMeGet(
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UserApiFp(configuration)
  return {
    /**
     * Get user information
     * @summary Get user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGet(options?: any): AxiosPromise<CreateUserResponse> {
      return localVarFp
        .usersMeGet(options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   * Get user information
   * @summary Get user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public usersMeGet(options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .usersMeGet(options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * VoteApi - axios parameter creator
 * @export
 */
export const VoteApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Get all ballots
     * @param {GetAllBallotRequest} getAllBallotRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voteAllBallotPost: async (
      getAllBallotRequest: GetAllBallotRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'getAllBallotRequest' is not null or undefined
      assertParamExists(
        'voteAllBallotPost',
        'getAllBallotRequest',
        getAllBallotRequest,
      )
      const localVarPath = `/vote/all-ballot`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getAllBallotRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get MP candidate in user area
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voteMpcandidateGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/vote/mpcandidate`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearerAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Process vote No to topic
     * @summary Process Vote No
     * @param {VoteNoRequest} voteNoRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voteNoPost: async (
      voteNoRequest: VoteNoRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'voteNoRequest' is not null or undefined
      assertParamExists('voteNoPost', 'voteNoRequest', voteNoRequest)
      const localVarPath = `/vote/no`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearerAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      )

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        voteNoRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Verify right to vote before can access to vote
     * @summary Verify right to vote
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    votePreVerifyGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/vote/pre-verify`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearerAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Process vote to a candidate
     * @summary Process Vote
     * @param {VoteRequest} voteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voteSubmitPost: async (
      voteRequest: VoteRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'voteRequest' is not null or undefined
      assertParamExists('voteSubmitPost', 'voteRequest', voteRequest)
      const localVarPath = `/vote/submit`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearerAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      )

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        voteRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * VoteApi - functional programming interface
 * @export
 */
export const VoteApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = VoteApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Get all ballots
     * @param {GetAllBallotRequest} getAllBallotRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async voteAllBallotPost(
      getAllBallotRequest: GetAllBallotRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<GetAllBallotResponse>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.voteAllBallotPost(
          getAllBallotRequest,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get MP candidate in user area
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async voteMpcandidateGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<CandidateResponse>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.voteMpcandidateGet(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Process vote No to topic
     * @summary Process Vote No
     * @param {VoteNoRequest} voteNoRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async voteNoPost(
      voteNoRequest: VoteNoRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.voteNoPost(
        voteNoRequest,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Verify right to vote before can access to vote
     * @summary Verify right to vote
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async votePreVerifyGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<VoteAvailableResponse>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.votePreVerifyGet(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Process vote to a candidate
     * @summary Process Vote
     * @param {VoteRequest} voteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async voteSubmitPost(
      voteRequest: VoteRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.voteSubmitPost(
        voteRequest,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * VoteApi - factory interface
 * @export
 */
export const VoteApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = VoteApiFp(configuration)
  return {
    /**
     *
     * @summary Get all ballots
     * @param {GetAllBallotRequest} getAllBallotRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voteAllBallotPost(
      getAllBallotRequest: GetAllBallotRequest,
      options?: any,
    ): AxiosPromise<Array<GetAllBallotResponse>> {
      return localVarFp
        .voteAllBallotPost(getAllBallotRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get MP candidate in user area
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voteMpcandidateGet(options?: any): AxiosPromise<Array<CandidateResponse>> {
      return localVarFp
        .voteMpcandidateGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Process vote No to topic
     * @summary Process Vote No
     * @param {VoteNoRequest} voteNoRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voteNoPost(
      voteNoRequest: VoteNoRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .voteNoPost(voteNoRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Verify right to vote before can access to vote
     * @summary Verify right to vote
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    votePreVerifyGet(
      options?: any,
    ): AxiosPromise<Array<VoteAvailableResponse>> {
      return localVarFp
        .votePreVerifyGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Process vote to a candidate
     * @summary Process Vote
     * @param {VoteRequest} voteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voteSubmitPost(
      voteRequest: VoteRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .voteSubmitPost(voteRequest, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * VoteApi - object-oriented interface
 * @export
 * @class VoteApi
 * @extends {BaseAPI}
 */
export class VoteApi extends BaseAPI {
  /**
   *
   * @summary Get all ballots
   * @param {GetAllBallotRequest} getAllBallotRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VoteApi
   */
  public voteAllBallotPost(
    getAllBallotRequest: GetAllBallotRequest,
    options?: AxiosRequestConfig,
  ) {
    return VoteApiFp(this.configuration)
      .voteAllBallotPost(getAllBallotRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get MP candidate in user area
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VoteApi
   */
  public voteMpcandidateGet(options?: AxiosRequestConfig) {
    return VoteApiFp(this.configuration)
      .voteMpcandidateGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Process vote No to topic
   * @summary Process Vote No
   * @param {VoteNoRequest} voteNoRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VoteApi
   */
  public voteNoPost(
    voteNoRequest: VoteNoRequest,
    options?: AxiosRequestConfig,
  ) {
    return VoteApiFp(this.configuration)
      .voteNoPost(voteNoRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Verify right to vote before can access to vote
   * @summary Verify right to vote
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VoteApi
   */
  public votePreVerifyGet(options?: AxiosRequestConfig) {
    return VoteApiFp(this.configuration)
      .votePreVerifyGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Process vote to a candidate
   * @summary Process Vote
   * @param {VoteRequest} voteRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VoteApi
   */
  public voteSubmitPost(
    voteRequest: VoteRequest,
    options?: AxiosRequestConfig,
  ) {
    return VoteApiFp(this.configuration)
      .voteSubmitPost(voteRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
