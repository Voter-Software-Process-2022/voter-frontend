/* tslint:disable */
/* eslint-disable */
/**
 * Voter API Docs
 * This is REST API Application from Voter module, Software Process and Project Management 2022.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base'

/**
 *
 * @export
 * @interface CreateUserInput
 */
export interface CreateUserInput {
  /**
   *
   * @type {string}
   * @memberof CreateUserInput
   */
  citizenID: string
  /**
   *
   * @type {string}
   * @memberof CreateUserInput
   */
  laserCode: string
  /**
   *
   * @type {string}
   * @memberof CreateUserInput
   */
  email: string
  /**
   *
   * @type {string}
   * @memberof CreateUserInput
   */
  password: string
  /**
   *
   * @type {string}
   * @memberof CreateUserInput
   */
  passwordConfirmation: string
}
/**
 *
 * @export
 * @interface CreateUserResponse
 */
export interface CreateUserResponse {
  /**
   *
   * @type {string}
   * @memberof CreateUserResponse
   */
  status?: string
  /**
   *
   * @type {User}
   * @memberof CreateUserResponse
   */
  user?: User
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
  /**
   *
   * @type {string}
   * @memberof ErrorResponse
   */
  status?: string
  /**
   *
   * @type {string}
   * @memberof ErrorResponse
   */
  error?: string
}
/**
 *
 * @export
 * @interface LoginUserInput
 */
export interface LoginUserInput {
  /**
   *
   * @type {string}
   * @memberof LoginUserInput
   */
  email: string
  /**
   *
   * @type {string}
   * @memberof LoginUserInput
   */
  password: string
}
/**
 *
 * @export
 * @interface LoginUserInputV2
 */
export interface LoginUserInputV2 {
  /**
   *
   * @type {string}
   * @memberof LoginUserInputV2
   */
  citizenId: string
  /**
   *
   * @type {string}
   * @memberof LoginUserInputV2
   */
  laserId: string
}
/**
 *
 * @export
 * @interface LoginUserResponse
 */
export interface LoginUserResponse {
  /**
   *
   * @type {string}
   * @memberof LoginUserResponse
   */
  status?: string
  /**
   *
   * @type {string}
   * @memberof LoginUserResponse
   */
  accessToken?: string
}
/**
 *
 * @export
 * @interface LoginUserResponseV2
 */
export interface LoginUserResponseV2 {
  /**
   *
   * @type {string}
   * @memberof LoginUserResponseV2
   */
  token?: string
}
/**
 *
 * @export
 * @interface MessageResponse
 */
export interface MessageResponse {
  /**
   *
   * @type {string}
   * @memberof MessageResponse
   */
  status?: string
  /**
   *
   * @type {string}
   * @memberof MessageResponse
   */
  message?: string
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {string}
   * @memberof User
   */
  citizenID?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  laserCode?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  email?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  _id?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  updatedAt?: string
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Login a user
     * @summary Login
     * @param {LoginUserInput} loginUserInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLoginPost: async (
      loginUserInput: LoginUserInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'loginUserInput' is not null or undefined
      assertParamExists('authLoginPost', 'loginUserInput', loginUserInput)
      const localVarPath = `/auth/login`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginUserInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Login with Government API
     * @summary Login with Gov
     * @param {LoginUserInputV2} loginUserInputV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLoginV2Post: async (
      loginUserInputV2: LoginUserInputV2,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'loginUserInputV2' is not null or undefined
      assertParamExists('authLoginV2Post', 'loginUserInputV2', loginUserInputV2)
      const localVarPath = `/auth/login/v2`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginUserInputV2,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Register a user
     * @summary Register
     * @param {CreateUserInput} createUserInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRegisterPost: async (
      createUserInput: CreateUserInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createUserInput' is not null or undefined
      assertParamExists('authRegisterPost', 'createUserInput', createUserInput)
      const localVarPath = `/auth/register`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createUserInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
  return {
    /**
     * Login a user
     * @summary Login
     * @param {LoginUserInput} loginUserInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authLoginPost(
      loginUserInput: LoginUserInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<LoginUserResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(
        loginUserInput,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Login with Government API
     * @summary Login with Gov
     * @param {LoginUserInputV2} loginUserInputV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authLoginV2Post(
      loginUserInputV2: LoginUserInputV2,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<LoginUserResponseV2>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginV2Post(
        loginUserInputV2,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Register a user
     * @summary Register
     * @param {CreateUserInput} createUserInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authRegisterPost(
      createUserInput: CreateUserInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateUserResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authRegisterPost(
          createUserInput,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuthApiFp(configuration)
  return {
    /**
     * Login a user
     * @summary Login
     * @param {LoginUserInput} loginUserInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLoginPost(
      loginUserInput: LoginUserInput,
      options?: any,
    ): AxiosPromise<LoginUserResponse> {
      return localVarFp
        .authLoginPost(loginUserInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Login with Government API
     * @summary Login with Gov
     * @param {LoginUserInputV2} loginUserInputV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLoginV2Post(
      loginUserInputV2: LoginUserInputV2,
      options?: any,
    ): AxiosPromise<LoginUserResponseV2> {
      return localVarFp
        .authLoginV2Post(loginUserInputV2, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Register a user
     * @summary Register
     * @param {CreateUserInput} createUserInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRegisterPost(
      createUserInput: CreateUserInput,
      options?: any,
    ): AxiosPromise<CreateUserResponse> {
      return localVarFp
        .authRegisterPost(createUserInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   * Login a user
   * @summary Login
   * @param {LoginUserInput} loginUserInput
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authLoginPost(
    loginUserInput: LoginUserInput,
    options?: AxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .authLoginPost(loginUserInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Login with Government API
   * @summary Login with Gov
   * @param {LoginUserInputV2} loginUserInputV2
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authLoginV2Post(
    loginUserInputV2: LoginUserInputV2,
    options?: AxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .authLoginV2Post(loginUserInputV2, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Register a user
   * @summary Register
   * @param {CreateUserInput} createUserInput
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authRegisterPost(
    createUserInput: CreateUserInput,
    options?: AxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .authRegisterPost(createUserInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * HealthcheckApi - axios parameter creator
 * @export
 */
export const HealthcheckApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Responds if the app is up and running
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/health`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * HealthcheckApi - functional programming interface
 * @export
 */
export const HealthcheckApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    HealthcheckApiAxiosParamCreator(configuration)
  return {
    /**
     * Responds if the app is up and running
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async healthGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<MessageResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.healthGet(
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * HealthcheckApi - factory interface
 * @export
 */
export const HealthcheckApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = HealthcheckApiFp(configuration)
  return {
    /**
     * Responds if the app is up and running
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthGet(options?: any): AxiosPromise<MessageResponse> {
      return localVarFp
        .healthGet(options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * HealthcheckApi - object-oriented interface
 * @export
 * @class HealthcheckApi
 * @extends {BaseAPI}
 */
export class HealthcheckApi extends BaseAPI {
  /**
   * Responds if the app is up and running
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HealthcheckApi
   */
  public healthGet(options?: AxiosRequestConfig) {
    return HealthcheckApiFp(this.configuration)
      .healthGet(options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Get user information
     * @summary Get user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearerAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration,
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
  return {
    /**
     * Get user information
     * @summary Get user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersMeGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateUserResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersMeGet(
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UserApiFp(configuration)
  return {
    /**
     * Get user information
     * @summary Get user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGet(options?: any): AxiosPromise<CreateUserResponse> {
      return localVarFp
        .usersMeGet(options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   * Get user information
   * @summary Get user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public usersMeGet(options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .usersMeGet(options)
      .then((request) => request(this.axios, this.basePath))
  }
}
